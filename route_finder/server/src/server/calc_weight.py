{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNOgH2ux2jdlpwya1fkeS7O"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b1QZOkMwVY-n","executionInfo":{"status":"ok","timestamp":1732572038377,"user_tz":-540,"elapsed":10875,"user":{"displayName":"松本敬裕","userId":"05963990253179086295"}},"outputId":"0f612ecc-c30f-4abd-8313-bf0379a83e02"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: openai in /usr/local/lib/python3.10/dist-packages (1.54.4)\n","Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.10/dist-packages (from openai) (3.7.1)\n","Requirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from openai) (1.9.0)\n","Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from openai) (0.27.2)\n","Requirement already satisfied: jiter<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from openai) (0.7.1)\n","Requirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from openai) (2.9.2)\n","Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from openai) (1.3.1)\n","Requirement already satisfied: tqdm>4 in /usr/local/lib/python3.10/dist-packages (from openai) (4.66.6)\n","Requirement already satisfied: typing-extensions<5,>=4.11 in /usr/local/lib/python3.10/dist-packages (from openai) (4.12.2)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai) (3.10)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai) (1.2.2)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (2024.8.30)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (1.0.7)\n","Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai) (0.14.0)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->openai) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.23.4 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->openai) (2.23.4)\n"]}],"source":["!pip install openai\n","import openai\n","\n","# APIキーの設定 (ベタ書き)\n","api_key = \"ここにAPIを設定\""]},{"cell_type":"code","source":["# A pattern with 3 weights\n","\n","#query からカテゴリ（Shortest Path か Scenic）を出力\n","client = openai.OpenAI(api_key=api_key)\n","\n","# プロンプトの設定\n","query = \"日頃のストレスを癒やしたい\"\n","prompt = \"# 目的\" \\\n","  \"あなたの気分や希望するルートの特徴を教えてください。それに応じて以下の3つの要素をどの程度重視するかを計算します。\" \\\n","  \"**weight_length, weight_green_index, weight_water_indexのみ出力する**\" \\\n","  \"\" \\\n","  \"# 情報\" \\\n","  \"weight_length(DOUBLE PRECISION): 目的地に最短距離または最短時間で到着することを優先します。\" \\\n","  \"weight_green_index(DOUBLE PRECISION): 公園や並木道などの緑地が多いルートを優先します。\" \\\n","  \"weight_water_index(DOUBLE PRECISION): 川や湖など水辺の近くを通るルートを優先します。\" \\\n","  \"\" \\\n","  \"必要な情報\" \\\n","  \"「最短距離だけを考えたい」「景色も楽しみたい」など、今の気分に合った希望を教えてください。\" \\\n","  \"# ルール、制約事項\" \\\n","  \"- 3つの要素の重みはそれぞれ 0～1の範囲 で計算され、合計は 1 になります。\" \\\n","  \"- 値が 0 の場合、その要素は考慮されません。\" \\\n","  \"- 値が 1 の場合、その要素のみを完全に重視します。\" \\\n","  \"- **weight_length, weight_green_index, weight_water_indexのみ出力する**\" \\\n","  \"\" \\\n","  \"# 出力例\" \\\n","  \"## 例1\" \\\n","  \"「とにかく最短距離」 → 最短経路を100%重視（weight_length=1.0, weight_green_index=0.0, weight_water_index=0.0）\" \\\n","  \"## 例2\" \\\n","  \"「気分転換に少し散歩して家に帰りたい」 → 緑地と水辺を考慮したルート（weight_length=0.2, weight_green_index=0.5, weight_water_index=0.3）\" \\\n","  \"入力値：\" + query\n","\n","# Chat Completion APIの呼び出し\n","response = client.chat.completions.create(\n","    messages=[\n","        {\"role\": \"user\",\n","         \"content\": prompt}\n","    ],\n","    model=\"gpt-4o\",  # モデルを指定\n",")\n","\n","# 応答の取得と表示\n","text = response.choices[0].message.content\n","print(text)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KfoOFbsoVr0K","executionInfo":{"status":"ok","timestamp":1732572039272,"user_tz":-540,"elapsed":902,"user":{"displayName":"松本敬裕","userId":"05963990253179086295"}},"outputId":"1111a905-8af3-44e2-9db1-462b2d50f125"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["weight_length=0.0, weight_green_index=0.6, weight_water_index=0.4\n"]}]},{"cell_type":"code","source":["# A pattern with 6 weights\n","\n","#query からカテゴリ（Shortest Path か Scenic）を出力\n","client = openai.OpenAI(api_key=api_key)\n","\n","# プロンプトの設定\n","query = \"日頃のストレスを癒やしたい\"\n","prompt = \"# 目的\" \\\n","  \"あなたの気分や希望するルートの特徴を教えてください。それに応じて以下の6つの要素をどの程度重視するかを計算します。\" \\\n","  \"**weight_length, weight_green_index, weight_water_index, weight_shade_index, weight_slope_index, weight_isolation_indexのみ出力する**\" \\\n","  \"\" \\\n","  \"# 情報\" \\\n","  \"weight_length(DOUBLE PRECISION): 目的地に最短距離または最短時間で到着することを優先します。\" \\\n","  \"weight_green_index(DOUBLE PRECISION): 公園や並木道などの緑地が多いルートを優先します。\" \\\n","  \"weight_water_index(DOUBLE PRECISION): 川や湖など水辺の近くを通るルートを優先します。\" \\\n","  \"weight_shade_index(DOUBLE PRECISION): 木陰などの涼しいエリアを通るルートを優先します。\" \\\n","  \"weight_slope_index(DOUBLE PRECISION): 傾斜の少ない、歩きやすいルートを優先します。\" \\\n","  \"weight_isolation_index(DOUBLE PRECISION): 人里離れた、静かで落ち着いた場所を優先します。\" \\\n","  \"\" \\\n","  \"必要な情報\" \\\n","  \"「最短距離だけを考えたい」「景色も楽しみたい」など、今の気分に合った希望を教えてください。\" \\\n","  \"# ルール、制約事項\" \\\n","  \"- **3つの要素の重みはそれぞれ 0～1の範囲 で計算され、合計は 1 になります。**\" \\\n","  \"- 値が 0 の場合、その要素は考慮されません。\" \\\n","  \"- 値が 1 の場合、その要素のみを完全に重視します。\" \\\n","  \"- **weight_length, weight_green_index, weight_water_index, weight_shade_index, weight_slope_index, weight_isolation_indexのみ出力する**\" \\\n","  \"\" \\\n","  \"# 出力例\" \\\n","  \"## 例1\" \\\n","  \"「とにかく最短距離」 → 最短経路を100%重視（weight_length=1.0, weight_green_index=0.0, weight_water_index=0.0, weight_shade_index=0.0, weight_slope_index=0.0, weight_isolation_index=0.0）\" \\\n","  \"## 例2\" \\\n","  \"「気分転換に少し散歩して家に帰りたい」 → 緑地と水辺を考慮したルート（weight_length=0.1, weight_green_index=0.5, weight_water_index=0.2, weight_shade_index=0.05, weight_slope_index=0.05, weight_isolation_index=0.0）\" \\\n","  \"入力値：\" + query\n","\n","# Chat Completion APIの呼び出し\n","response = client.chat.completions.create(\n","    messages=[\n","        {\"role\": \"user\",\n","         \"content\": prompt}\n","    ],\n","    model=\"gpt-4o\",  # モデルを指定\n",")\n","\n","# 応答の取得と表示\n","text = response.choices[0].message.content\n","print(text)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"psTbSteiVuei","executionInfo":{"status":"ok","timestamp":1732572040706,"user_tz":-540,"elapsed":1437,"user":{"displayName":"松本敬裕","userId":"05963990253179086295"}},"outputId":"6e22ba55-5572-41f4-88a3-487f9297ae99"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["weight_length=0.1, weight_green_index=0.35, weight_water_index=0.25, weight_shade_index=0.15, weight_slope_index=0.05, weight_isolation_index=0.1\n"]}]}]}